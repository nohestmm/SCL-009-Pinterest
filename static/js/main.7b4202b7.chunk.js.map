{"version":3,"sources":["Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["Modal","handleClose","show","pic","showHideClassName","className","src","alt","onClick","clientId","App","props","showModal","console","log","setState","hideModal","state","images","active","query","getQueryValue","bind","searchImg","toggleClass","currentState","this","e","target","value","fetch","then","res","json","resJson","results","map","el","key","id","urls","thumb","small","modalOpen","placeholder","type","onKeyPress","style","color","showImages","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b4202b7.chunk.js","sourcesContent":["import React from 'react';\n// class Modal extends React.Component {\n//     render() {\n//       const { show, bg} = this.props;\n//       // Custom styles: set visibility and backbround color\n//       const styles = {\n//         modal: {\n//           display: (show) ? null : 'none', \n//           backgroundColor: bg || 'rgba(255, 255, 255, 0.8)',     \n//         }\n//       };\n      \n//       return (\n//         <div className=\"modal-wrapper\" style={styles.modal}>\n//           { /* Close Button: invoke callback */ }\n//           <span className=\"glyphicon modal-item\"\n//               onClick={this.props.onClose}><i class=\"fas fa-times\"></i></span>\n//           { /* Content */ }\n//           <div className=\"modal-item\">\n//               { this.props.children }\n//                   </div>\n//         </div>\n//       )\n//     }\n//   }\nconst Modal = ({ handleClose, show, pic }) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n  \n    return (\n      <div className={showHideClassName}>\n        <section className=\"modal-main\">\n          <img src={pic} alt=\"\"/>\n          <button onClick={handleClose}>close</button>\n        </section>\n      </div>\n    );\n  };\n\n\n  export default Modal;","import React from 'react';\nimport Modal from './Modal'\n\nimport './App.css';\nimport '../node_modules/@fortawesome/fontawesome-free/js/all';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.css';\n\nconst clientId = \"092762aa2384f8aef21f266b06fd40cc4018c6c36fb4493858d3330ab9988e8a\";\nconst mainUrl = \"https://api.unsplash.com/search/photos\";\nconst randomUrl = \"https://api.unsplash.com/photos\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      images: [],\n      show: false,\n      active: false,\n      pic: ''\n    }\n    this.query = '';\n    this.getQueryValue = this.getQueryValue.bind(this);\n    this.searchImg = this.searchImg.bind(this);\n    this.toggleClass = this.toggleClass.bind(this);\n    // this.toggleModal = this.toggleModal.bind(this);\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n    \n\n  }\n\n  toggleClass() {\n    const currentState = this.state.active;\n    this.setState({ active: !currentState });\n}\nshowModal = (pic) => {\n  console.log(pic)\n  this.setState({ show: true,});\n  this.setState({pic: pic})\n};\n\nhideModal = () => {\n  this.setState({ show: false });\n};\n\n//  // Toggle Modal visibility\n//  toggleModal(pic) {\n//    console.log(pic)\n//   const state = this.state.modalOpen;\n//   // Update state: modal visibility and its content\n//   this.setState({ modalOpen: !state, pic });\n// }\n\n\n\n  getQueryValue(e) {\n    this.query = e.target.value;\n\n    this.searchImg(this.query)\n  }\n\n  searchImg(query) {\n    fetch(`${mainUrl}?per_page=1000&query=${query}&client_id=${clientId}`)\n      .then(res => {\n        return res.json()\n      }).then(resJson => {\n        console.log(resJson);\n        this.setState({ images: resJson.results })\n      })\n  }\n  showImages() {\n\n    return (\n      this.state.images.map(el => {\n      return (\n      <div \n      className=\"content-img\" \n      key={el.id} >\n      <img className=\"imagesList\" \n      src={el.urls.thumb} alt=\"\" \n      key={el.id} onClick={()=>this.showModal(el.urls.small)} /></div>)\n    })\n      \n   \n    ) \n    \n    \n  }\n  componentDidMount() {\n\n    fetch(`${randomUrl}?per_page=1000&client_id=${clientId}`)\n      .then(res => {\n        return res.json()\n      }).then(resJson => {\n        console.log(resJson);\n        this.setState({\n          images: resJson\n        })\n      })\n  }\n\n  render() {\n    const { modalOpen, pic } = this.state;\n    return (\n      <>\n        <nav className=\"navbar\">\n          <div className=\"content-icon\"><i className=\"fab fa-pinterest\" onClick={this.getQueryValue}></i></div>\n        \n            <div className= {this.state.active ? \"border-search\": \"content-input\"} onClick={this.toggleClass}>\n            <div><i className=\"fas fa-search\"></i></div>\n            <input className=\"input-search color-text\" placeholder=\"Buscar\" type=\"text\" onKeyPress={this.getQueryValue} />\n          </div>\n          <div className=\"second-content\">\n            <div className=\"color-text navtext\" style={{ color: \"#262626\" }}>Inicio</div>\n            <div className=\"color-text navtext\">Siguiendo</div>\n            <div className=\"content-profile navtext color-text\">\n              <div><i className=\"fas fa-user-circle\"></i></div>\n              <div>Nohemi</div>\n            </div>\n            <div className=\"border-separator padding-navtext\"></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-comment-dots\"></i></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-bell\"></i></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-ellipsis-h\"></i></div>\n          </div>\n        </nav> \n       {/* <Modal  show={ modalOpen } \n           onClose={ this.toggleModal.bind(this) }>\n          <img src={ pic } alt=\"\"/>\n        </Modal>  */}\n\n        \n <div className=\"content-images\">{this.showImages()}</div>\n       \n         <Modal show={this.state.show} pic={this.state.pic} handleClose={this.hideModal}/>\n          \n       \n      \n \n\n       \n\n\n\n\n\n      </>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}