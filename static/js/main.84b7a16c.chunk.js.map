{"version":3,"sources":["Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["Modal","handleClose","show","pic","showHideClassName","className","src","alt","onClick","clientId","randomUrl","App","props","showModal","console","log","setState","hideModal","fecthImages","state","count","start","fetch","then","res","json","resJson","images","concat","active","query","getQueryValue","bind","searchImg","toggleClass","currentState","this","e","target","value","results","map","el","index","key","urls","thumb","placeholder","type","onKeyPress","style","color","dataLength","length","next","hasMore","loader","showImages","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84b7a16c.chunk.js","sourcesContent":["import React from 'react';\n// class Modal extends React.Component {\n//     render() {\n//       const { show, bg} = this.props;\n//       // Custom styles: set visibility and backbround color\n//       const styles = {\n//         modal: {\n//           display: (show) ? null : 'none', \n//           backgroundColor: bg || 'rgba(255, 255, 255, 0.8)',     \n//         }\n//       };\n\n//       return (\n//         <div className=\"modal-wrapper\" style={styles.modal}>\n//           { /* Close Button: invoke callback */ }\n//           <span className=\"glyphicon modal-item\"\n//               onClick={this.props.onClose}><i class=\"fas fa-times\"></i></span>\n//           { /* Content */ }\n//           <div className=\"modal-item\">\n//               { this.props.children }\n//                   </div>\n//         </div>\n//       )\n//     }\n//   }\nconst Modal = ({ handleClose, show, pic }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <div className=\"content-modalheader\">\n          <div className=\"content-dotsmodal\"><i className=\"fas fa-ellipsis-h font-sizellipsis\"></i></div>\n          <div className=\"content-buttom\">\n            <button className=\"modal-button\">\n            <div><i className=\"fas fa-upload\"></i></div>\n            <div>Enviar</div>\n           </button>\n            <div><i className=\"fas fa-thumbtack\"></i></div>\n           \n          </div>\n        </div>\n        <div className=\"content-modalimg\"><img src={pic} alt=\"\" className=\"img-modal\" /></div>\n        <button onClick={handleClose}>close</button>\n      </section>\n    </div>\n  );\n};\n\n\nexport default Modal;","import React from 'react';\nimport Modal from './Modal'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport './App.css';\nimport '../node_modules/@fortawesome/fontawesome-free/js/all';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.css';\n\nconst clientId = \"092762aa2384f8aef21f266b06fd40cc4018c6c36fb4493858d3330ab9988e8a\";\nconst mainUrl = \"https://api.unsplash.com/search/photos\";\nconst randomUrl = \"https://api.unsplash.com/photos\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      images: [],\n      show: false,\n      active: false,\n      pic: '',\n      count:100,\n      start:1\n      \n    }\n    this.query = '';\n    this.getQueryValue = this.getQueryValue.bind(this);\n    this.searchImg = this.searchImg.bind(this);\n    this.toggleClass = this.toggleClass.bind(this);\n    // this.toggleModal = this.toggleModal.bind(this);\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n    \n\n  }\n\n  toggleClass() {\n    const currentState = this.state.active;\n    this.setState({ active: !currentState });\n}\nshowModal = (pic) => {\n  console.log(pic)\n  this.setState({ show: true,});\n  this.setState({pic: pic})\n};\n\nhideModal = () => {\n  this.setState({ show: false });\n};\n\n//  // Toggle Modal visibility\n//  toggleModal(pic) {\n//    console.log(pic)\n//   const state = this.state.modalOpen;\n//   // Update state: modal visibility and its content\n//   this.setState({ modalOpen: !state, pic });\n// }\n\n\n\n  getQueryValue(e) {\n    this.query = e.target.value;\n\n    this.searchImg(this.query)\n  }\n\n  searchImg(query) {\n    fetch(`${mainUrl}?per_page=1000&query=${query}&client_id=${clientId}`)\n      .then(res => {\n        return res.json()\n      }).then(resJson => {\n        console.log(resJson);\n        this.setState({ images: resJson.results })\n      })\n  }\n  showImages() {\n\n    return (\n      this.state.images.map((el,index) => {\n      return (\n      <div   key= {index}\n      className=\"content-img\" \n      >\n      <img className=\"imagesList\" \n      src={el.urls.thumb} alt=\"\" key= {index}\n       onClick={()=>this.showModal(el.urls.thumb)} /></div>)\n    })\n      \n   \n    ) \n    \n    \n  }\n  componentDidMount() {\n\n    const { count, start } = this.state;\n\n    fetch(`${randomUrl}?per_page=${count}&client_id=${clientId}&start=${start}`)\n      .then(res => {\n        return res.json()\n      }).then(resJson => {\n        console.log(resJson);\n        this.setState({\n          images: resJson\n        })\n      })\n  }\n\nfecthImages=()=>{\n  const { count, start } = this.state;\n  this.setState({start: this.state.start + count});\n  \n  fetch(`${randomUrl}?per_page=${start}&client_id=${clientId}&start=${count}`)\n  .then(res => {\n    return res.json()\n  }).then(resJson => {\n    console.log(resJson);\n    this.setState({\n      images: this.state.images.concat(resJson)\n    })\n  })\n}\n\n  render() {\n   \n    return (\n      <>\n        <nav className=\"navbar\">\n          <div className=\"content-icon\"><i className=\"fab fa-pinterest\" onClick={this.getQueryValue}></i></div>\n        \n            <div className= {this.state.active ?\"border-search\":\"content-input\"} onClick={this.toggleClass}>\n            <div><i className=\"fas fa-search\"></i></div>\n            <input className=\"input-search color-text\" placeholder=\"Buscar\" type=\"text\" onKeyPress={this.getQueryValue} />\n          </div>\n          <div className=\"second-content\">\n            <div className=\"color-text navtext\" style={{ color: \"#262626\" }}>Inicio</div>\n            <div className=\"color-text navtext\">Siguiendo</div>\n            <div className=\"content-profile navtext color-text\">\n              <div><i className=\"fas fa-user-circle\"></i></div>\n              <div>Nohemi</div>\n            </div>\n            <div className=\"border-separator padding-navtext\"></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-comment-dots\"></i></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-bell\"></i></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-ellipsis-h\"></i></div>\n          </div>\n        </nav> \n\n     <InfiniteScroll\n     dataLength={this.state.images.length} \n     next={this.fecthImages}\n     hasMore={true}\n     loader={<h4>...</h4>}> \n     <div className=\"content-images\">{this.showImages()}</div>\n     </InfiniteScroll>\n\n\n\n\n       \n         <Modal show={this.state.show} pic={this.state.pic} handleClose={this.hideModal}/>\n          \n       \n      \n \n\n       \n\n\n\n\n\n      </>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}