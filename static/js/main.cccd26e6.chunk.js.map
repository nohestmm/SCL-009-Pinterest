{"version":3,"sources":["Footerbutton.jsx","Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["Footerbutton","className","Modal","handleClose","show","pic","showHideClassName","onClick","src","alt","clientId","randomUrl","App","props","showModal","setState","hideModal","fecthImages","state","count","start","fetch","then","res","json","resJson","images","concat","active","query","getQueryValue","bind","searchImg","toggleClass","currentState","this","e","target","value","console","log","results","map","el","index","key","urls","thumb","placeholder","type","onKeyPress","style","color","dataLength","length","next","hasMore","loader","showImages","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cccd26e6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footerbutton =()=>{\n    return(\n     <section className=\"footer\">\n         <div><button className=\"btn-plus\"><i className=\"fas fa-plus\"></i></button></div>\n         <div><button className=\"btn-question\"><i className=\"fas fa-question\"></i></button></div>\n     </section>\n    )\n\n}\nexport default Footerbutton;","import React from 'react';\nimport Footerbutton from './Footerbutton';\nconst Modal = ({ handleClose, show, pic }) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  return (\n    <div className={showHideClassName}>\n      <div className= \"button-closemodal\">\n        <button className = \"btn-close \" onClick={handleClose}><i className=\"fas fa-times\"></i>\n        </button>\n        </div>\n         <section className=\"modal-main\"> \n        <div className=\"content-modalheader\">\n          <div className=\"content-dotsmodal\"><i className=\"fas fa-ellipsis-h font-sizellipsis\"></i></div>\n          <div className=\"content-buttom\">\n            <button className=\"modal-button color-send\">\n            <div><i className=\"fas fa-upload\"></i></div>\n            <div className=\"text-btnsend\">Enviar</div>\n           </button>\n           <button className=\"modal-button color-save\">\n            <div><i className=\"fas fa-thumbtack\"></i></div>\n            <div className=\"text-btnsave\">Guardar</div>\n           </button>      \n          </div>\n        </div>\n        <div className=\"content-modalimg\">\n          <div className=\"divimg-modal\"><img src={pic} alt=\"\" className=\"img-modal\" /></div>\n          </div>\n           </section>\n           <Footerbutton/>\n    </div>\n  );\n};\nexport default Modal;","import React from 'react';\nimport Modal from './Modal'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport './App.css';\nimport '../node_modules/@fortawesome/fontawesome-free/js/all';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.css';\nimport Footerbutton from './Footerbutton';\n\nconst clientId = \"092762aa2384f8aef21f266b06fd40cc4018c6c36fb4493858d3330ab9988e8a\";\nconst mainUrl = \"https://api.unsplash.com/search/photos\";\nconst randomUrl = \"https://api.unsplash.com/photos\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      images: [],\n      show: false,\n      active: false,\n      pic: '',\n      count: 100,\n      start: 1\n    }\n    this.query = '';\n    this.getQueryValue = this.getQueryValue.bind(this);\n    this.searchImg = this.searchImg.bind(this);\n    this.toggleClass = this.toggleClass.bind(this);\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n  }\n  toggleClass() {\n    const currentState = this.state.active;\n    this.setState({ active: !currentState });\n  }\n  showModal = (pic) => {\n    this.setState({ show: true, });\n    this.setState({ pic: pic })\n  }\n  hideModal = () => {\n    this.setState({ show: false });\n  };\n  getQueryValue(e) {\n    this.query = e.target.value;\n    this.searchImg(this.query)\n  }\n  searchImg(query) {\n    fetch(`${mainUrl}?per_page=1000&query=${query}&client_id=${clientId}`)\n      .then(res => {\n        return res.json()\n      }).then(resJson => {\n        console.log(resJson);\n        this.setState({ images: resJson.results })\n      })\n  }\n  showImages() {\n    return (\n      this.state.images.map((el, index) => {\n        return (\n          <div key={index}\n            className=\"content-img\">\n            <img className=\"images-list\"\n              src={el.urls.thumb} alt=\"\" key={index}\n              onClick={() => this.showModal(el.urls.thumb)} /></div>)\n      })\n    )\n  }\n  componentDidMount() {\n    const { count, start } = this.state;\n    fetch(`${randomUrl}?per_page=${count}&client_id=${clientId}&start=${start}`)\n      .then(res => {\n        return res.json()\n      }).then(resJson => {\n        console.log(resJson);\n        this.setState({\n          images: resJson\n        })\n      })\n  }\n  fecthImages = () => {\n    const { count, start } = this.state;\n    this.setState({ start: this.state.start + count });\n    fetch(`${randomUrl}?per_page=${start}&client_id=${clientId}&start=${count}`)\n      .then(res => {\n        return res.json()\n      }).then(resJson => {\n        this.setState({\n          images: this.state.images.concat(resJson)\n        })\n      })\n  }\n  render() {\n    return (\n      <>\n        <nav className=\"navbar\">\n          <div className=\"content-icon\"><i className=\"fab fa-pinterest\" onClick={this.getQueryValue}></i></div>\n          <div className={this.state.active ? \"border-search\" : \"content-input\"} onClick={this.toggleClass}>\n            <div><i className=\"fas fa-search\"></i></div>\n            <input className=\"input-search color-text\" placeholder=\"Buscar\" type=\"text\" onKeyPress={this.getQueryValue} />\n          </div>\n          <div className=\"second-content\">\n            <div className=\"color-text navtext\" style={{ color: \"#262626\" }}>Inicio</div>\n            <div className=\"color-text navtext\">Siguiendo</div>\n            <div className=\"content-profile navtext color-text\">\n              <div><i className=\"fas fa-user-circle\"></i></div>\n              <div>Nohemi</div>\n            </div>\n            <div className=\"border-separator padding-navtext\"></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-comment-dots\"></i></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-bell\"></i></div>\n            <div className=\"content-iconright\"><i className=\"fas fa-ellipsis-h\"></i></div>\n          </div>\n        </nav>\n        <InfiniteScroll\n          dataLength={this.state.images.length}\n          next={this.fecthImages}\n          hasMore={true}\n          loader={<h4>...</h4>}>\n          <div className=\"content-images\">{this.showImages()}</div>\n        </InfiniteScroll>\n        <Modal\n          show={this.state.show}\n          pic={this.state.pic}\n          handleClose={this.hideModal} />\n        <Footerbutton />\n      </>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}